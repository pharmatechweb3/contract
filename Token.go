// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package token

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TokenMetaData contains all meta data concerning the Token contract.
var TokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"AddLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BuyPrivateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"}],\"name\":\"RemoveLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCommission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"END_PRIVATE_SALE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRIVATE_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"addLeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subLeader\",\"type\":\"address\"}],\"name\":\"addSubLeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commissionToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnlock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packageIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"privateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"removeLeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUSDT\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawImmediately\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405262000014620003f960201b60201c565b600a62000022919062000853565b630bebc200620000339190620008a3565b60085562000046620003f960201b60201c565b600a62000054919062000853565b6302faf080620000659190620008a3565b60095562ed4e00600a556365fa2700600b556040518060600160405280600360ff168152602001600260ff168152602001600160ff168152506012906003620000b09291906200065a565b506103e860155560016016555f601855348015620000cc575f80fd5b5060405162005e8f38038062005e8f8339818101604052810190620000f2919062000952565b6040518060400160405280601081526020017f506861726d617465636820546f6b656e000000000000000000000000000000008152506040518060400160405280600381526020017f504d54000000000000000000000000000000000000000000000000000000000081525081600390816200016f919062000bf2565b50806004908162000181919062000bf2565b50505060016007819055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001f49062000d34565b60405180910390fd5b8060175f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002515f801b836200040160201b60201c565b6001600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620002b6620003f960201b60201c565b600a620002c4919062000853565b612710620002d39190620008a3565b600f5f620002e6620003f960201b60201c565b600a620002f4919062000853565b6103e8620003039190620008a3565b81526020019081526020015f208190555062000324620003f960201b60201c565b600a62000332919062000853565b61c74c620003419190620008a3565b600f5f62000354620003f960201b60201c565b600a62000362919062000853565b611388620003719190620008a3565b81526020019081526020015f208190555062000392620003f960201b60201c565b600a620003a0919062000853565b62019b2f620003b09190620008a3565b600f5f620003c3620003f960201b60201c565b600a620003d1919062000853565b612710620003e09190620008a3565b81526020019081526020015f2081905550505062000d54565b5f6012905090565b6200041382826200043d60201b60201c565b620004388160065f8581526020019081526020015f206200052960201b90919060201c565b505050565b6200044f82826200055e60201b60201c565b6200052557600160055f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620004ca620005c260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f62000556835f018373ffffffffffffffffffffffffffffffffffffffff165f1b620005c960201b60201c565b905092915050565b5f60055f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f620005dc83836200063a60201b60201c565b6200063057825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f20819055506001905062000634565b5f90505b92915050565b5f80836001015f8481526020019081526020015f20541415905092915050565b826003810192821562000691579160200282015b8281111562000690578251829060ff169055916020019190600101906200066e565b5b509050620006a09190620006a4565b5090565b5b80821115620006bd575f815f905550600101620006a5565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156200074b57808604811115620007235762000722620006c1565b5b6001851615620007335780820291505b80810290506200074385620006ee565b945062000703565b94509492505050565b5f8262000765576001905062000837565b8162000774575f905062000837565b81600181146200078d57600281146200079857620007ce565b600191505062000837565b60ff841115620007ad57620007ac620006c1565b5b8360020a915084821115620007c757620007c6620006c1565b5b5062000837565b5060208310610133831016604e8410600b8410161715620008085782820a905083811115620008025762000801620006c1565b5b62000837565b620008178484846001620006fa565b92509050818404811115620008315762000830620006c1565b5b81810290505b9392505050565b5f819050919050565b5f60ff82169050919050565b5f6200085f826200083e565b91506200086c8362000847565b92506200089b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000754565b905092915050565b5f620008af826200083e565b9150620008bc836200083e565b9250828202620008cc816200083e565b91508282048414831517620008e657620008e5620006c1565b5b5092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200091c82620008f1565b9050919050565b6200092e8162000910565b811462000939575f80fd5b50565b5f815190506200094c8162000923565b92915050565b5f80604083850312156200096b576200096a620008ed565b5b5f6200097a858286016200093c565b92505060206200098d858286016200093c565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168062000a1357607f821691505b60208210810362000a295762000a28620009ce565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830262000a8d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000a50565b62000a99868362000a50565b95508019841693508086168417925050509392505050565b5f819050919050565b5f62000ada62000ad462000ace846200083e565b62000ab1565b6200083e565b9050919050565b5f819050919050565b62000af58362000aba565b62000b0d62000b048262000ae1565b84845462000a5c565b825550505050565b5f90565b62000b2362000b15565b62000b3081848462000aea565b505050565b5b8181101562000b575762000b4b5f8262000b19565b60018101905062000b36565b5050565b601f82111562000ba65762000b708162000a2f565b62000b7b8462000a41565b8101602085101562000b8b578190505b62000ba362000b9a8562000a41565b83018262000b35565b50505b505050565b5f82821c905092915050565b5f62000bc85f198460080262000bab565b1980831691505092915050565b5f62000be2838362000bb7565b9150826002028217905092915050565b62000bfd8262000997565b67ffffffffffffffff81111562000c195762000c18620009a1565b5b62000c258254620009fb565b62000c3282828562000b5b565b5f60209050601f83116001811462000c68575f841562000c53578287015190505b62000c5f858262000bd5565b86555062000cce565b601f19841662000c788662000a2f565b5f5b8281101562000ca15784890151825560018201915060208501945060208101905062000c7a565b8683101562000cc1578489015162000cbd601f89168262000bb7565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f696e76616c69642d5553445400000000000000000000000000000000000000005f82015250565b5f62000d1c600c8362000cd6565b915062000d298262000ce6565b602082019050919050565b5f6020820190508181035f83015262000d4d8162000d0e565b9050919050565b61512d8062000d625f395ff3fe608060405234801561000f575f80fd5b506004361061027d575f3560e01c8063749ea5981161015a578063a9059cbb116100cc578063ca15c87311610085578063ca15c87314610848578063ca1e5e7c14610878578063ce9b626714610882578063d50a3d2c1461089e578063d547741f146108ba578063dd62ed3e146108d65761027d565b8063a9059cbb1461075d578063ab390a1f1461078d578063af157e13146107a9578063b69867c1146107dc578063bf91f708146107fa578063c216212a146108185761027d565b806391d148541161011e57806391d148541461068557806395d89b41146106b557806399c5c8aa146106d3578063a217fddf146106f1578063a457c2d71461070f578063a793e7dc1461073f5761027d565b8063749ea598146105bd57806379cc6790146105ed5780637e529e8d146106095780639010d07c146106395780639037f182146106695761027d565b806332cb6b0c116101f3578063485d3834116101b7578063485d3834146104d557806350448177146104f35780635ab971eb146105115780636198e339146105415780636c24a76f1461055d57806370a082311461058d5761027d565b806332cb6b0c1461043357806336568abe14610451578063395093511461046d57806340c10f191461049d57806342966c68146104b95761027d565b806322b3a7c81161024557806322b3a7c81461034d57806323b872dd1461037d578063248a9ca3146103ad5780632836765d146103dd5780632f2ff15d146103f9578063313ce567146104155761027d565b806301ffc9a71461028157806306fdde03146102b1578063095ea7b3146102cf57806310693fcd146102ff57806318160ddd1461032f575b5f80fd5b61029b6004803603810190610296919061389b565b610906565b6040516102a891906138e0565b60405180910390f35b6102b961097f565b6040516102c69190613983565b60405180910390f35b6102e960048036038101906102e49190613a30565b610a0f565b6040516102f691906138e0565b60405180910390f35b61031960048036038101906103149190613a6e565b610a31565b6040516103269190613aa8565b60405180910390f35b610337610a46565b6040516103449190613aa8565b60405180910390f35b61036760048036038101906103629190613ac1565b610a4f565b6040516103749190613aa8565b60405180910390f35b61039760048036038101906103929190613aec565b610a68565b6040516103a491906138e0565b60405180910390f35b6103c760048036038101906103c29190613b6f565b610a96565b6040516103d49190613ba9565b60405180910390f35b6103f760048036038101906103f29190613bc2565b610ab3565b005b610413600480360381019061040e9190613c00565b610d23565b005b61041d610d44565b60405161042a9190613c59565b60405180910390f35b61043b610d4c565b6040516104489190613aa8565b60405180910390f35b61046b60048036038101906104669190613c00565b610d52565b005b61048760048036038101906104829190613a30565b610dd5565b60405161049491906138e0565b60405180910390f35b6104b760048036038101906104b29190613a30565b610e0b565b005b6104d360048036038101906104ce9190613ac1565b610ebf565b005b6104dd610ed3565b6040516104ea9190613aa8565b60405180910390f35b6104fb610ed9565b6040516105089190613aa8565b60405180910390f35b61052b60048036038101906105269190613a6e565b610edf565b6040516105389190613c81565b60405180910390f35b61055b60048036038101906105569190613ac1565b610f0f565b005b61057760048036038101906105729190613a6e565b6111d6565b6040516105849190613aa8565b60405180910390f35b6105a760048036038101906105a29190613a6e565b611236565b6040516105b49190613aa8565b60405180910390f35b6105d760048036038101906105d29190613a6e565b61127b565b6040516105e491906138e0565b60405180910390f35b61060760048036038101906106029190613a30565b611298565b005b610623600480360381019061061e9190613a6e565b6112b8565b6040516106309190613aa8565b60405180910390f35b610653600480360381019061064e9190613c9a565b6112cd565b6040516106609190613c81565b60405180910390f35b610683600480360381019061067e9190613a6e565b6112f9565b005b61069f600480360381019061069a9190613c00565b6114d5565b6040516106ac91906138e0565b60405180910390f35b6106bd611539565b6040516106ca9190613983565b60405180910390f35b6106db6115c9565b6040516106e89190613d33565b60405180910390f35b6106f96115ee565b6040516107069190613ba9565b60405180910390f35b61072960048036038101906107249190613a30565b6115f4565b60405161073691906138e0565b60405180910390f35b610747611669565b6040516107549190613aa8565b60405180910390f35b61077760048036038101906107729190613a30565b61166f565b60405161078491906138e0565b60405180910390f35b6107a760048036038101906107a29190613a6e565b611691565b005b6107c360048036038101906107be9190613ac1565b61190e565b6040516107d39493929190613d4c565b60405180910390f35b6107e4611965565b6040516107f19190613aa8565b60405180910390f35b61080261196b565b60405161080f9190613aa8565b60405180910390f35b610832600480360381019061082d9190613ac1565b611971565b60405161083f9190613aa8565b60405180910390f35b610862600480360381019061085d9190613b6f565b611986565b60405161086f9190613aa8565b60405180910390f35b6108806119a7565b005b61089c60048036038101906108979190613a6e565b611cf3565b005b6108b860048036038101906108b39190613a30565b611edd565b005b6108d460048036038101906108cf9190613c00565b612687565b005b6108f060048036038101906108eb9190613bc2565b6126a8565b6040516108fd9190613aa8565b60405180910390f35b5f7f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061097857506109778261272a565b5b9050919050565b60606003805461098e90613dbc565b80601f01602080910402602001604051908101604052809291908181526020018280546109ba90613dbc565b8015610a055780601f106109dc57610100808354040283529160200191610a05565b820191905f5260205f20905b8154815290600101906020018083116109e857829003601f168201915b5050505050905090565b5f80610a196127a3565b9050610a268185856127aa565b600191505092915050565b600e602052805f5260405f205f915090505481565b5f600254905090565b60128160038110610a5e575f80fd5b015f915090505481565b5f80610a726127a3565b9050610a7f85828561296d565b610a8a8585856129f8565b60019150509392505050565b5f60055f8381526020019081526020015f20600101549050919050565b610abc33612c64565b15610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190613e9e565b60405180910390fd5b610b72612c75565b5f801b610b7e81612cc4565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390613f06565b60405180910390fd5b6001600c5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555081600d5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f389d1971ac1401d81e203468076b4f96e8f39fc8cf0d575992fbec02ae3373ec60405160405180910390a350610d1f612cd8565b5050565b610d2c82610a96565b610d3581612cc4565b610d3f8383612ce2565b505050565b5f6012905090565b60085481565b610d5a6127a3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90613f94565b60405180910390fd5b610dd18282612d14565b5050565b5f80610ddf6127a3565b9050610e00818585610df185896126a8565b610dfb9190613fdf565b6127aa565b600191505092915050565b5f801b610e1781612cc4565b5f8211610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e509061405c565b60405180910390fd5b60085482610e65610a46565b610e6f9190613fdf565b1115610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea7906140ea565b60405180910390fd5b610eba8383612d46565b505050565b610ed0610eca6127a3565b82612e94565b50565b600a5481565b600b5481565b600d602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f1833612c64565b15610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f90613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbd90613e9e565b60405180910390fd5b610fce612c75565b5f4290505f610fdb6127a3565b90505f60105f8581526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890614152565b60405180910390fd5b80600201548310156110c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bf906141ba565b60405180910390fd5b5f1515816003015f9054906101000a900460ff1615151461111e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111590614222565b60405180910390fd5b8060010154600e5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461116e9190614240565b925050819055506001816003015f6101000a81548160ff0219169083151502179055507f832a253ad4e9e88f705006a24d9957b8aa1de307a0f9d0a6ad5fd0b0ac810505846040516111c09190613aa8565b60405180910390a15050506111d3612cd8565b50565b5f61122f600e5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461122184611236565b61305790919063ffffffff16565b9050919050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b600c602052805f5260405f205f915054906101000a900460ff1681565b6112aa826112a46127a3565b8361296d565b6112b48282612e94565b5050565b6011602052805f5260405f205f915090505481565b5f6112f18260065f8681526020019081526020015f2061306c90919063ffffffff16565b905092915050565b61130233612c64565b15611342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133990613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a790613e9e565b60405180910390fd5b6113b8612c75565b5f801b6113c481612cc4565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611432576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611429906142e3565b60405180910390fd5b5f600c5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2e85674249ebd86c47d4e26f8bbbfa002362d4c01856c6ec75b481e4fdfe63e360405160405180910390a2506114d2612cd8565b50565b5f60055f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60606004805461154890613dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461157490613dbc565b80156115bf5780601f10611596576101008083540402835291602001916115bf565b820191905f5260205f20905b8154815290600101906020018083116115a257829003601f168201915b5050505050905090565b60175f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f801b81565b5f806115fe6127a3565b90505f61160b82866126a8565b905083811015611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790614371565b60405180910390fd5b61165d82868684036127aa565b60019250505092915050565b60095481565b5f806116796127a3565b90506116868185856129f8565b600191505092915050565b61169a33612c64565b156116da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d190613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f90613e9e565b60405180910390fd5b611750612c75565b600c5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166117d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d0906143d9565b60405180910390fd5b6001600c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555033600d5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f389d1971ac1401d81e203468076b4f96e8f39fc8cf0d575992fbec02ae3373ec60405160405180910390a361190b612cd8565b50565b6010602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015f9054906101000a900460ff16905084565b60165481565b60155481565b600f602052805f5260405f205f915090505481565b5f6119a060065f8481526020019081526020015f20613083565b9050919050565b6119b033612c64565b156119f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e790613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5590613e9e565b60405180910390fd5b611a66612c75565b600c5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae6906143d9565b60405180910390fd5b5f611af86127a3565b90505f60115f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411611b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7090614467565b60405180910390fd5b5f60115f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905060175f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611c16929190614485565b6020604051808303815f875af1158015611c32573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c5691906144d6565b505f60115f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff167f2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e7582604051611cdf9190613aa8565b60405180910390a25050611cf1612cd8565b565b611cfc33612c64565b15611d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3390613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da190613e9e565b60405180910390fd5b611db2612c75565b5f801b611dbe81612cc4565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2390614571565b60405180910390fd5b60175f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83611e7330611236565b6040518363ffffffff1660e01b8152600401611e90929190614485565b6020604051808303815f875af1158015611eac573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ed091906144d6565b5050611eda612cd8565b50565b611ee633612c64565b15611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d90613e36565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8b90613e9e565b60405180910390fd5b611f9c612c75565b600b54421115611fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd8906145d9565b60405180910390fd5b5f600f5f8381526020019081526020015f205403612034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202b90614667565b60405180910390fd5b600954600f5f8381526020019081526020015f20546018546120569190613fdf565b1115612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e906146f5565b60405180910390fd5b600854816120a3610a46565b6120ad9190613fdf565b11156120ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e59061475d565b60405180910390fd5b600c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16612177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216e906147eb565b60405180910390fd5b5f6121806127a3565b905082600d5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060175f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8230856040518463ffffffff1660e01b815260040161225b93929190614809565b6020604051808303815f875af1158015612277573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229b91906144d6565b506122b781600f5f8581526020019081526020015f2054612d46565b600f5f8381526020019081526020015f205460185f8282546122d99190613fdf565b92505081905550600f5f8381526020019081526020015f2054600e5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060405180608001604052808273ffffffffffffffffffffffffffffffffffffffff168152602001600f5f8581526020019081526020015f20548152602001600a544261237f9190613fdf565b81526020015f151581525060105f60165481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015f6101000a81548160ff0219169083151502179055509050508073ffffffffffffffffffffffffffffffffffffffff167fcbb858f9c6fd8db9fdd2c3498b6283aede9cd9d624dcc967fa0859ad4242db0983856016546040516124639392919061483e565b60405180910390a25f600390505f5b81811015612661575f600d5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612563575060011515600c5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161515145b1561264a575f6125a5601284600381106125805761257f614873565b5b01546125976015548961309690919063ffffffff16565b6130ab90919063ffffffff16565b90508060115f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546125f39190613fdf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167ffa345d2beed33434a9d5f83f5f64d58bd4d778ddf4bdfdc038cd621eb23a2f1b826040516126409190613aa8565b60405180910390a2505b809350508080612659906148a0565b915050612472565b5060165f815480929190612674906148a0565b91905055505050612683612cd8565b5050565b61269082610a96565b61269981612cc4565b6126a38383612d14565b505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061279c575061279b826130c0565b5b9050919050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280f90614957565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287d906149e5565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516129609190613aa8565b60405180910390a3505050565b5f61297884846126a8565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146129f257818110156129e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129db90614a4d565b60405180910390fd5b6129f184848484036127aa565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5d90614adb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acb90614b69565b60405180910390fd5b612adf838383613129565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015612b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5990614bf7565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612c4b9190613aa8565b60405180910390a3612c5e848484613189565b50505050565b5f80823b90505f8111915050919050565b600260075403612cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb190614c5f565b60405180910390fd5b6002600781905550565b612cd581612cd06127a3565b61318e565b50565b6001600781905550565b612cec8282613212565b612d0f8160065f8581526020019081526020015f206132ed90919063ffffffff16565b505050565b612d1e828261331a565b612d418160065f8581526020019081526020015f206133f590919063ffffffff16565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dab90614cc7565b60405180910390fd5b612dbf5f8383613129565b8060025f828254612dd09190613fdf565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612e7d9190613aa8565b60405180910390a3612e905f8383613189565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef990614d55565b60405180910390fd5b612f0d825f83613129565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015612f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8790614de3565b60405180910390fd5b8181035f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f82825403925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161303f9190613aa8565b60405180910390a3613052835f84613189565b505050565b5f81836130649190614240565b905092915050565b5f613079835f0183613422565b5f1c905092915050565b5f61308f825f01613449565b9050919050565b5f81836130a39190614e2e565b905092915050565b5f81836130b89190614e5e565b905092915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f613133846111d6565b905081811015613178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161316f90614ee9565b60405180910390fd5b613183848484613458565b50505050565b505050565b61319882826114d5565b61320e576131a58161345d565b6131b2835f1c602061348a565b6040516020016131c3929190614fd5565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132059190613983565b60405180910390fd5b5050565b61321c82826114d5565b6132e957600160055f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061328e6127a3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f613312835f018373ffffffffffffffffffffffffffffffffffffffff165f1b6136bf565b905092915050565b61332482826114d5565b156133f1575f60055f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506133966127a3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b5f61341a835f018373ffffffffffffffffffffffffffffffffffffffff165f1b613726565b905092915050565b5f825f01828154811061343857613437614873565b5b905f5260205f200154905092915050565b5f815f01805490509050919050565b505050565b60606134838273ffffffffffffffffffffffffffffffffffffffff16601460ff1661348a565b9050919050565b60605f600283600261349c9190614e5e565b6134a69190613fdf565b67ffffffffffffffff8111156134bf576134be61500e565b5b6040519080825280601f01601f1916602001820160405280156134f15781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f8151811061352857613527614873565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061358b5761358a614873565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60018460026135c99190614e5e565b6135d39190613fdf565b90505b6001811115613672577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061361557613614614873565b5b1a60f81b82828151811061362c5761362b614873565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600485901c94508061366b9061503b565b90506135d6565b505f84146136b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136ac906150ac565b60405180910390fd5b8091505092915050565b5f6136ca8383613822565b61371c57825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f208190555060019050613720565b5f90505b92915050565b5f80836001015f8481526020019081526020015f205490505f8114613817575f6001826137539190614240565b90505f6001865f01805490506137699190614240565b90508181146137cf575f865f01828154811061378857613787614873565b5b905f5260205f200154905080875f0184815481106137a9576137a8614873565b5b905f5260205f20018190555083876001015f8381526020019081526020015f2081905550505b855f018054806137e2576137e16150ca565b5b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061381c565b5f9150505b92915050565b5f80836001015f8481526020019081526020015f20541415905092915050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61387a81613846565b8114613884575f80fd5b50565b5f8135905061389581613871565b92915050565b5f602082840312156138b0576138af613842565b5b5f6138bd84828501613887565b91505092915050565b5f8115159050919050565b6138da816138c6565b82525050565b5f6020820190506138f35f8301846138d1565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613930578082015181840152602081019050613915565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613955826138f9565b61395f8185613903565b935061396f818560208601613913565b6139788161393b565b840191505092915050565b5f6020820190508181035f83015261399b818461394b565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6139cc826139a3565b9050919050565b6139dc816139c2565b81146139e6575f80fd5b50565b5f813590506139f7816139d3565b92915050565b5f819050919050565b613a0f816139fd565b8114613a19575f80fd5b50565b5f81359050613a2a81613a06565b92915050565b5f8060408385031215613a4657613a45613842565b5b5f613a53858286016139e9565b9250506020613a6485828601613a1c565b9150509250929050565b5f60208284031215613a8357613a82613842565b5b5f613a90848285016139e9565b91505092915050565b613aa2816139fd565b82525050565b5f602082019050613abb5f830184613a99565b92915050565b5f60208284031215613ad657613ad5613842565b5b5f613ae384828501613a1c565b91505092915050565b5f805f60608486031215613b0357613b02613842565b5b5f613b10868287016139e9565b9350506020613b21868287016139e9565b9250506040613b3286828701613a1c565b9150509250925092565b5f819050919050565b613b4e81613b3c565b8114613b58575f80fd5b50565b5f81359050613b6981613b45565b92915050565b5f60208284031215613b8457613b83613842565b5b5f613b9184828501613b5b565b91505092915050565b613ba381613b3c565b82525050565b5f602082019050613bbc5f830184613b9a565b92915050565b5f8060408385031215613bd857613bd7613842565b5b5f613be5858286016139e9565b9250506020613bf6858286016139e9565b9150509250929050565b5f8060408385031215613c1657613c15613842565b5b5f613c2385828601613b5b565b9250506020613c34858286016139e9565b9150509250929050565b5f60ff82169050919050565b613c5381613c3e565b82525050565b5f602082019050613c6c5f830184613c4a565b92915050565b613c7b816139c2565b82525050565b5f602082019050613c945f830184613c72565b92915050565b5f8060408385031215613cb057613caf613842565b5b5f613cbd85828601613b5b565b9250506020613cce85828601613a1c565b9150509250929050565b5f819050919050565b5f613cfb613cf6613cf1846139a3565b613cd8565b6139a3565b9050919050565b5f613d0c82613ce1565b9050919050565b5f613d1d82613d02565b9050919050565b613d2d81613d13565b82525050565b5f602082019050613d465f830184613d24565b92915050565b5f608082019050613d5f5f830187613c72565b613d6c6020830186613a99565b613d796040830185613a99565b613d8660608301846138d1565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680613dd357607f821691505b602082108103613de657613de5613d8f565b5b50919050565b7f436f6e7472616374206e6f7420616c6c6f7765640000000000000000000000005f82015250565b5f613e20601483613903565b9150613e2b82613dec565b602082019050919050565b5f6020820190508181035f830152613e4d81613e14565b9050919050565b7f50726f787920636f6e7472616374206e6f7420616c6c6f7765640000000000005f82015250565b5f613e88601a83613903565b9150613e9382613e54565b602082019050919050565b5f6020820190508181035f830152613eb581613e7c565b9050919050565b7f4164644c65616465723a2063616e206e6f7420616464206164647265737320305f82015250565b5f613ef0602083613903565b9150613efb82613ebc565b602082019050919050565b5f6020820190508181035f830152613f1d81613ee4565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e63655f8201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b5f613f7e602f83613903565b9150613f8982613f24565b604082019050919050565b5f6020820190508181035f830152613fab81613f72565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613fe9826139fd565b9150613ff4836139fd565b925082820190508082111561400c5761400b613fb2565b5b92915050565b7f4d696e743a20616d6f756e74206d7573742067726561746572207468616e20305f82015250565b5f614046602083613903565b915061405182614012565b602082019050919050565b5f6020820190508181035f8301526140738161403a565b9050919050565b7f4d696e743a20746f74616c206d696e746564206d757374206c657373207468615f8201527f6e206d61785f737570706c790000000000000000000000000000000000000000602082015250565b5f6140d4602c83613903565b91506140df8261407a565b604082019050919050565b5f6020820190508181035f830152614101816140c8565b9050919050565b7f556e6c6f636b3a206e6f742062757965720000000000000000000000000000005f82015250565b5f61413c601183613903565b915061414782614108565b602082019050919050565b5f6020820190508181035f83015261416981614130565b9050919050565b7f556e6c6f636b3a206e6f742074696d6520746f20756e6c6f636b2079657400005f82015250565b5f6141a4601e83613903565b91506141af82614170565b602082019050919050565b5f6020820190508181035f8301526141d181614198565b9050919050565b7f556e6c6f636b3a207061636b61676520616c726561647920756e6c6f636b00005f82015250565b5f61420c601e83613903565b9150614217826141d8565b602082019050919050565b5f6020820190508181035f83015261423981614200565b9050919050565b5f61424a826139fd565b9150614255836139fd565b925082820390508181111561426d5761426c613fb2565b5b92915050565b7f52656d6f76654c65616465723a2063616e206e6f742072656d6f7665206164645f8201527f7265737320300000000000000000000000000000000000000000000000000000602082015250565b5f6142cd602683613903565b91506142d882614273565b604082019050919050565b5f6020820190508181035f8301526142fa816142c1565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f61435b602583613903565b915061436682614301565b604082019050919050565b5f6020820190508181035f8301526143888161434f565b9050919050565b7f6f6e6c79206c65616465720000000000000000000000000000000000000000005f82015250565b5f6143c3600b83613903565b91506143ce8261438f565b602082019050919050565b5f6020820190508181035f8301526143f0816143b7565b9050919050565b7f4c656164657257697468647261773a20636f6d6d697373696f6e206d757374205f8201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b5f614451602e83613903565b915061445c826143f7565b604082019050919050565b5f6020820190508181035f83015261447e81614445565b9050919050565b5f6040820190506144985f830185613c72565b6144a56020830184613a99565b9392505050565b6144b5816138c6565b81146144bf575f80fd5b50565b5f815190506144d0816144ac565b92915050565b5f602082840312156144eb576144ea613842565b5b5f6144f8848285016144c2565b91505092915050565b7f57697468647261773a207472616e7366657220746f206e756c6c2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f61455b602283613903565b915061456682614501565b604082019050919050565b5f6020820190508181035f8301526145888161454f565b9050919050565b7f5072697661746553616c653a20656e64656400000000000000000000000000005f82015250565b5f6145c3601283613903565b91506145ce8261458f565b602082019050919050565b5f6020820190508181035f8301526145f0816145b7565b9050919050565b7f5072697661746553616c653a2063616e6e206e6f742066696e64207061636b615f8201527f6765000000000000000000000000000000000000000000000000000000000000602082015250565b5f614651602283613903565b915061465c826145f7565b604082019050919050565b5f6020820190508181035f83015261467e81614645565b9050919050565b7f5072697661746553616c653a205265616368206d6178207072697661746520735f8201527f616c650000000000000000000000000000000000000000000000000000000000602082015250565b5f6146df602383613903565b91506146ea82614685565b604082019050919050565b5f6020820190508181035f83015261470c816146d3565b9050919050565b7f5072697661746553616c653a205265616368206d617820737570706c790000005f82015250565b5f614747601d83613903565b915061475282614713565b602082019050919050565b5f6020820190508181035f8301526147748161473b565b9050919050565b7f5072697661746553616c653a2061646472657373206973206e6f74206c6561645f8201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b5f6147d5602283613903565b91506147e08261477b565b604082019050919050565b5f6020820190508181035f830152614802816147c9565b9050919050565b5f60608201905061481c5f830186613c72565b6148296020830185613c72565b6148366040830184613a99565b949350505050565b5f6060820190506148515f830186613a99565b61485e6020830185613c72565b61486b6040830184613a99565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6148aa826139fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036148dc576148db613fb2565b5b600182019050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f614941602483613903565b915061494c826148e7565b604082019050919050565b5f6020820190508181035f83015261496e81614935565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6149cf602283613903565b91506149da82614975565b604082019050919050565b5f6020820190508181035f8301526149fc816149c3565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f614a37601d83613903565b9150614a4282614a03565b602082019050919050565b5f6020820190508181035f830152614a6481614a2b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f614ac5602583613903565b9150614ad082614a6b565b604082019050919050565b5f6020820190508181035f830152614af281614ab9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f614b53602383613903565b9150614b5e82614af9565b604082019050919050565b5f6020820190508181035f830152614b8081614b47565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f614be1602683613903565b9150614bec82614b87565b604082019050919050565b5f6020820190508181035f830152614c0e81614bd5565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f614c49601f83613903565b9150614c5482614c15565b602082019050919050565b5f6020820190508181035f830152614c7681614c3d565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f614cb1601f83613903565b9150614cbc82614c7d565b602082019050919050565b5f6020820190508181035f830152614cde81614ca5565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f614d3f602183613903565b9150614d4a82614ce5565b604082019050919050565b5f6020820190508181035f830152614d6c81614d33565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f614dcd602283613903565b9150614dd882614d73565b604082019050919050565b5f6020820190508181035f830152614dfa81614dc1565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614e38826139fd565b9150614e43836139fd565b925082614e5357614e52614e01565b5b828204905092915050565b5f614e68826139fd565b9150614e73836139fd565b9250828202614e81816139fd565b91508282048414831517614e9857614e97613fb2565b5b5092915050565b7f4e6f7420456e6f75676820417661696c61626c6520546f6b656e0000000000005f82015250565b5f614ed3601a83613903565b9150614ede82614e9f565b602082019050919050565b5f6020820190508181035f830152614f0081614ec7565b9050919050565b5f81905092915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000005f82015250565b5f614f45601783614f07565b9150614f5082614f11565b601782019050919050565b5f614f65826138f9565b614f6f8185614f07565b9350614f7f818560208601613913565b80840191505092915050565b7f206973206d697373696e6720726f6c65200000000000000000000000000000005f82015250565b5f614fbf601183614f07565b9150614fca82614f8b565b601182019050919050565b5f614fdf82614f39565b9150614feb8285614f5b565b9150614ff682614fb3565b91506150028284614f5b565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f615045826139fd565b91505f820361505757615056613fb2565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e745f82015250565b5f615096602083613903565b91506150a182615062565b602082019050919050565b5f6020820190508181035f8301526150c38161508a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea264697066735822122035e858ab38e53fcbdfd99581a2f42655dfd202596fa3824a3a014d77e33dcdf064736f6c63430008150033",
}

// TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMetaData.ABI instead.
var TokenABI = TokenMetaData.ABI

// TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMetaData.Bin instead.
var TokenBin = TokenMetaData.Bin

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend, _adminAddress common.Address, _usdtAddress common.Address) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenBin), backend, _adminAddress, _usdtAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Token *TokenCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Token *TokenSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Token.Contract.DEFAULTADMINROLE(&_Token.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Token *TokenCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Token.Contract.DEFAULTADMINROLE(&_Token.CallOpts)
}

// ENDPRIVATESALETIME is a free data retrieval call binding the contract method 0x50448177.
//
// Solidity: function END_PRIVATE_SALE_TIME() view returns(uint256)
func (_Token *TokenCaller) ENDPRIVATESALETIME(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "END_PRIVATE_SALE_TIME")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ENDPRIVATESALETIME is a free data retrieval call binding the contract method 0x50448177.
//
// Solidity: function END_PRIVATE_SALE_TIME() view returns(uint256)
func (_Token *TokenSession) ENDPRIVATESALETIME() (*big.Int, error) {
	return _Token.Contract.ENDPRIVATESALETIME(&_Token.CallOpts)
}

// ENDPRIVATESALETIME is a free data retrieval call binding the contract method 0x50448177.
//
// Solidity: function END_PRIVATE_SALE_TIME() view returns(uint256)
func (_Token *TokenCallerSession) ENDPRIVATESALETIME() (*big.Int, error) {
	return _Token.Contract.ENDPRIVATESALETIME(&_Token.CallOpts)
}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Token *TokenCaller) LOCKDURATION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "LOCK_DURATION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Token *TokenSession) LOCKDURATION() (*big.Int, error) {
	return _Token.Contract.LOCKDURATION(&_Token.CallOpts)
}

// LOCKDURATION is a free data retrieval call binding the contract method 0x485d3834.
//
// Solidity: function LOCK_DURATION() view returns(uint256)
func (_Token *TokenCallerSession) LOCKDURATION() (*big.Int, error) {
	return _Token.Contract.LOCKDURATION(&_Token.CallOpts)
}

// MAXPRIVATESALE is a free data retrieval call binding the contract method 0xa793e7dc.
//
// Solidity: function MAX_PRIVATE_SALE() view returns(uint256)
func (_Token *TokenCaller) MAXPRIVATESALE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "MAX_PRIVATE_SALE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPRIVATESALE is a free data retrieval call binding the contract method 0xa793e7dc.
//
// Solidity: function MAX_PRIVATE_SALE() view returns(uint256)
func (_Token *TokenSession) MAXPRIVATESALE() (*big.Int, error) {
	return _Token.Contract.MAXPRIVATESALE(&_Token.CallOpts)
}

// MAXPRIVATESALE is a free data retrieval call binding the contract method 0xa793e7dc.
//
// Solidity: function MAX_PRIVATE_SALE() view returns(uint256)
func (_Token *TokenCallerSession) MAXPRIVATESALE() (*big.Int, error) {
	return _Token.Contract.MAXPRIVATESALE(&_Token.CallOpts)
}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Token *TokenCaller) MAXSUPPLY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "MAX_SUPPLY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Token *TokenSession) MAXSUPPLY() (*big.Int, error) {
	return _Token.Contract.MAXSUPPLY(&_Token.CallOpts)
}

// MAXSUPPLY is a free data retrieval call binding the contract method 0x32cb6b0c.
//
// Solidity: function MAX_SUPPLY() view returns(uint256)
func (_Token *TokenCallerSession) MAXSUPPLY() (*big.Int, error) {
	return _Token.Contract.MAXSUPPLY(&_Token.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Token *TokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Token *TokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, account)
}

// CommissionDecimal is a free data retrieval call binding the contract method 0xbf91f708.
//
// Solidity: function commissionDecimal() view returns(uint256)
func (_Token *TokenCaller) CommissionDecimal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "commissionDecimal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionDecimal is a free data retrieval call binding the contract method 0xbf91f708.
//
// Solidity: function commissionDecimal() view returns(uint256)
func (_Token *TokenSession) CommissionDecimal() (*big.Int, error) {
	return _Token.Contract.CommissionDecimal(&_Token.CallOpts)
}

// CommissionDecimal is a free data retrieval call binding the contract method 0xbf91f708.
//
// Solidity: function commissionDecimal() view returns(uint256)
func (_Token *TokenCallerSession) CommissionDecimal() (*big.Int, error) {
	return _Token.Contract.CommissionDecimal(&_Token.CallOpts)
}

// CommissionToken is a free data retrieval call binding the contract method 0x7e529e8d.
//
// Solidity: function commissionToken(address ) view returns(uint256)
func (_Token *TokenCaller) CommissionToken(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "commissionToken", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionToken is a free data retrieval call binding the contract method 0x7e529e8d.
//
// Solidity: function commissionToken(address ) view returns(uint256)
func (_Token *TokenSession) CommissionToken(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.CommissionToken(&_Token.CallOpts, arg0)
}

// CommissionToken is a free data retrieval call binding the contract method 0x7e529e8d.
//
// Solidity: function commissionToken(address ) view returns(uint256)
func (_Token *TokenCallerSession) CommissionToken(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.CommissionToken(&_Token.CallOpts, arg0)
}

// Commissions is a free data retrieval call binding the contract method 0x22b3a7c8.
//
// Solidity: function commissions(uint256 ) view returns(uint256)
func (_Token *TokenCaller) Commissions(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "commissions", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Commissions is a free data retrieval call binding the contract method 0x22b3a7c8.
//
// Solidity: function commissions(uint256 ) view returns(uint256)
func (_Token *TokenSession) Commissions(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.Commissions(&_Token.CallOpts, arg0)
}

// Commissions is a free data retrieval call binding the contract method 0x22b3a7c8.
//
// Solidity: function commissions(uint256 ) view returns(uint256)
func (_Token *TokenCallerSession) Commissions(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.Commissions(&_Token.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Token *TokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Token *TokenSession) Decimals() (uint8, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Token *TokenCallerSession) Decimals() (uint8, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// GetAvailableBalance is a free data retrieval call binding the contract method 0x6c24a76f.
//
// Solidity: function getAvailableBalance(address _wallet) view returns(uint256)
func (_Token *TokenCaller) GetAvailableBalance(opts *bind.CallOpts, _wallet common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "getAvailableBalance", _wallet)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAvailableBalance is a free data retrieval call binding the contract method 0x6c24a76f.
//
// Solidity: function getAvailableBalance(address _wallet) view returns(uint256)
func (_Token *TokenSession) GetAvailableBalance(_wallet common.Address) (*big.Int, error) {
	return _Token.Contract.GetAvailableBalance(&_Token.CallOpts, _wallet)
}

// GetAvailableBalance is a free data retrieval call binding the contract method 0x6c24a76f.
//
// Solidity: function getAvailableBalance(address _wallet) view returns(uint256)
func (_Token *TokenCallerSession) GetAvailableBalance(_wallet common.Address) (*big.Int, error) {
	return _Token.Contract.GetAvailableBalance(&_Token.CallOpts, _wallet)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Token *TokenCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Token *TokenSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Token.Contract.GetRoleAdmin(&_Token.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Token *TokenCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Token.Contract.GetRoleAdmin(&_Token.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Token *TokenCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Token *TokenSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Token.Contract.GetRoleMember(&_Token.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Token *TokenCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Token.Contract.GetRoleMember(&_Token.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Token *TokenCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Token *TokenSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Token.Contract.GetRoleMemberCount(&_Token.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Token *TokenCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Token.Contract.GetRoleMemberCount(&_Token.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Token *TokenCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Token *TokenSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Token.Contract.HasRole(&_Token.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Token *TokenCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Token.Contract.HasRole(&_Token.CallOpts, role, account)
}

// Leaders is a free data retrieval call binding the contract method 0x749ea598.
//
// Solidity: function leaders(address ) view returns(bool)
func (_Token *TokenCaller) Leaders(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "leaders", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Leaders is a free data retrieval call binding the contract method 0x749ea598.
//
// Solidity: function leaders(address ) view returns(bool)
func (_Token *TokenSession) Leaders(arg0 common.Address) (bool, error) {
	return _Token.Contract.Leaders(&_Token.CallOpts, arg0)
}

// Leaders is a free data retrieval call binding the contract method 0x749ea598.
//
// Solidity: function leaders(address ) view returns(bool)
func (_Token *TokenCallerSession) Leaders(arg0 common.Address) (bool, error) {
	return _Token.Contract.Leaders(&_Token.CallOpts, arg0)
}

// LockToken is a free data retrieval call binding the contract method 0x10693fcd.
//
// Solidity: function lockToken(address ) view returns(uint256)
func (_Token *TokenCaller) LockToken(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "lockToken", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockToken is a free data retrieval call binding the contract method 0x10693fcd.
//
// Solidity: function lockToken(address ) view returns(uint256)
func (_Token *TokenSession) LockToken(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.LockToken(&_Token.CallOpts, arg0)
}

// LockToken is a free data retrieval call binding the contract method 0x10693fcd.
//
// Solidity: function lockToken(address ) view returns(uint256)
func (_Token *TokenCallerSession) LockToken(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.LockToken(&_Token.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Token *TokenSession) Name() (string, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Token *TokenCallerSession) Name() (string, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// PackageHistory is a free data retrieval call binding the contract method 0xaf157e13.
//
// Solidity: function packageHistory(uint256 ) view returns(address buyer, uint256 amount, uint256 unlockTime, bool isUnlock)
func (_Token *TokenCaller) PackageHistory(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Buyer      common.Address
	Amount     *big.Int
	UnlockTime *big.Int
	IsUnlock   bool
}, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "packageHistory", arg0)

	outstruct := new(struct {
		Buyer      common.Address
		Amount     *big.Int
		UnlockTime *big.Int
		IsUnlock   bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Buyer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnlockTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.IsUnlock = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// PackageHistory is a free data retrieval call binding the contract method 0xaf157e13.
//
// Solidity: function packageHistory(uint256 ) view returns(address buyer, uint256 amount, uint256 unlockTime, bool isUnlock)
func (_Token *TokenSession) PackageHistory(arg0 *big.Int) (struct {
	Buyer      common.Address
	Amount     *big.Int
	UnlockTime *big.Int
	IsUnlock   bool
}, error) {
	return _Token.Contract.PackageHistory(&_Token.CallOpts, arg0)
}

// PackageHistory is a free data retrieval call binding the contract method 0xaf157e13.
//
// Solidity: function packageHistory(uint256 ) view returns(address buyer, uint256 amount, uint256 unlockTime, bool isUnlock)
func (_Token *TokenCallerSession) PackageHistory(arg0 *big.Int) (struct {
	Buyer      common.Address
	Amount     *big.Int
	UnlockTime *big.Int
	IsUnlock   bool
}, error) {
	return _Token.Contract.PackageHistory(&_Token.CallOpts, arg0)
}

// PackageIndex is a free data retrieval call binding the contract method 0xb69867c1.
//
// Solidity: function packageIndex() view returns(uint256)
func (_Token *TokenCaller) PackageIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "packageIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PackageIndex is a free data retrieval call binding the contract method 0xb69867c1.
//
// Solidity: function packageIndex() view returns(uint256)
func (_Token *TokenSession) PackageIndex() (*big.Int, error) {
	return _Token.Contract.PackageIndex(&_Token.CallOpts)
}

// PackageIndex is a free data retrieval call binding the contract method 0xb69867c1.
//
// Solidity: function packageIndex() view returns(uint256)
func (_Token *TokenCallerSession) PackageIndex() (*big.Int, error) {
	return _Token.Contract.PackageIndex(&_Token.CallOpts)
}

// Packages is a free data retrieval call binding the contract method 0xc216212a.
//
// Solidity: function packages(uint256 ) view returns(uint256)
func (_Token *TokenCaller) Packages(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "packages", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Packages is a free data retrieval call binding the contract method 0xc216212a.
//
// Solidity: function packages(uint256 ) view returns(uint256)
func (_Token *TokenSession) Packages(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.Packages(&_Token.CallOpts, arg0)
}

// Packages is a free data retrieval call binding the contract method 0xc216212a.
//
// Solidity: function packages(uint256 ) view returns(uint256)
func (_Token *TokenCallerSession) Packages(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.Packages(&_Token.CallOpts, arg0)
}

// RefInfo is a free data retrieval call binding the contract method 0x5ab971eb.
//
// Solidity: function refInfo(address ) view returns(address)
func (_Token *TokenCaller) RefInfo(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "refInfo", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RefInfo is a free data retrieval call binding the contract method 0x5ab971eb.
//
// Solidity: function refInfo(address ) view returns(address)
func (_Token *TokenSession) RefInfo(arg0 common.Address) (common.Address, error) {
	return _Token.Contract.RefInfo(&_Token.CallOpts, arg0)
}

// RefInfo is a free data retrieval call binding the contract method 0x5ab971eb.
//
// Solidity: function refInfo(address ) view returns(address)
func (_Token *TokenCallerSession) RefInfo(arg0 common.Address) (common.Address, error) {
	return _Token.Contract.RefInfo(&_Token.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Token *TokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Token *TokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Token.Contract.SupportsInterface(&_Token.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Token *TokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Token.Contract.SupportsInterface(&_Token.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Token *TokenSession) Symbol() (string, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Token *TokenCallerSession) Symbol() (string, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TokenUSDT is a free data retrieval call binding the contract method 0x99c5c8aa.
//
// Solidity: function tokenUSDT() view returns(address)
func (_Token *TokenCaller) TokenUSDT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "tokenUSDT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenUSDT is a free data retrieval call binding the contract method 0x99c5c8aa.
//
// Solidity: function tokenUSDT() view returns(address)
func (_Token *TokenSession) TokenUSDT() (common.Address, error) {
	return _Token.Contract.TokenUSDT(&_Token.CallOpts)
}

// TokenUSDT is a free data retrieval call binding the contract method 0x99c5c8aa.
//
// Solidity: function tokenUSDT() view returns(address)
func (_Token *TokenCallerSession) TokenUSDT() (common.Address, error) {
	return _Token.Contract.TokenUSDT(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// AddLeader is a paid mutator transaction binding the contract method 0x2836765d.
//
// Solidity: function addLeader(address _leader, address _referral) returns()
func (_Token *TokenTransactor) AddLeader(opts *bind.TransactOpts, _leader common.Address, _referral common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "addLeader", _leader, _referral)
}

// AddLeader is a paid mutator transaction binding the contract method 0x2836765d.
//
// Solidity: function addLeader(address _leader, address _referral) returns()
func (_Token *TokenSession) AddLeader(_leader common.Address, _referral common.Address) (*types.Transaction, error) {
	return _Token.Contract.AddLeader(&_Token.TransactOpts, _leader, _referral)
}

// AddLeader is a paid mutator transaction binding the contract method 0x2836765d.
//
// Solidity: function addLeader(address _leader, address _referral) returns()
func (_Token *TokenTransactorSession) AddLeader(_leader common.Address, _referral common.Address) (*types.Transaction, error) {
	return _Token.Contract.AddLeader(&_Token.TransactOpts, _leader, _referral)
}

// AddSubLeader is a paid mutator transaction binding the contract method 0xab390a1f.
//
// Solidity: function addSubLeader(address _subLeader) returns()
func (_Token *TokenTransactor) AddSubLeader(opts *bind.TransactOpts, _subLeader common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "addSubLeader", _subLeader)
}

// AddSubLeader is a paid mutator transaction binding the contract method 0xab390a1f.
//
// Solidity: function addSubLeader(address _subLeader) returns()
func (_Token *TokenSession) AddSubLeader(_subLeader common.Address) (*types.Transaction, error) {
	return _Token.Contract.AddSubLeader(&_Token.TransactOpts, _subLeader)
}

// AddSubLeader is a paid mutator transaction binding the contract method 0xab390a1f.
//
// Solidity: function addSubLeader(address _subLeader) returns()
func (_Token *TokenTransactorSession) AddSubLeader(_subLeader common.Address) (*types.Transaction, error) {
	return _Token.Contract.AddSubLeader(&_Token.TransactOpts, _subLeader)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Token *TokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Token *TokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Token *TokenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Token *TokenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Token *TokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Token *TokenSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.BurnFrom(&_Token.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Token *TokenTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.BurnFrom(&_Token.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Token *TokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Token *TokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Token.Contract.DecreaseAllowance(&_Token.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Token *TokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Token.Contract.DecreaseAllowance(&_Token.TransactOpts, spender, subtractedValue)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Token *TokenTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Token *TokenSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantRole(&_Token.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Token *TokenTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantRole(&_Token.TransactOpts, role, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Token *TokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Token *TokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Token.Contract.IncreaseAllowance(&_Token.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Token *TokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Token.Contract.IncreaseAllowance(&_Token.TransactOpts, spender, addedValue)
}

// LeaderWithdraw is a paid mutator transaction binding the contract method 0xca1e5e7c.
//
// Solidity: function leaderWithdraw() returns()
func (_Token *TokenTransactor) LeaderWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "leaderWithdraw")
}

// LeaderWithdraw is a paid mutator transaction binding the contract method 0xca1e5e7c.
//
// Solidity: function leaderWithdraw() returns()
func (_Token *TokenSession) LeaderWithdraw() (*types.Transaction, error) {
	return _Token.Contract.LeaderWithdraw(&_Token.TransactOpts)
}

// LeaderWithdraw is a paid mutator transaction binding the contract method 0xca1e5e7c.
//
// Solidity: function leaderWithdraw() returns()
func (_Token *TokenTransactorSession) LeaderWithdraw() (*types.Transaction, error) {
	return _Token.Contract.LeaderWithdraw(&_Token.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_Token *TokenTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint", _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_Token *TokenSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_Token *TokenTransactorSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, _to, _amount)
}

// PrivateSale is a paid mutator transaction binding the contract method 0xd50a3d2c.
//
// Solidity: function privateSale(address _referral, uint256 _amount) returns()
func (_Token *TokenTransactor) PrivateSale(opts *bind.TransactOpts, _referral common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "privateSale", _referral, _amount)
}

// PrivateSale is a paid mutator transaction binding the contract method 0xd50a3d2c.
//
// Solidity: function privateSale(address _referral, uint256 _amount) returns()
func (_Token *TokenSession) PrivateSale(_referral common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.PrivateSale(&_Token.TransactOpts, _referral, _amount)
}

// PrivateSale is a paid mutator transaction binding the contract method 0xd50a3d2c.
//
// Solidity: function privateSale(address _referral, uint256 _amount) returns()
func (_Token *TokenTransactorSession) PrivateSale(_referral common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.PrivateSale(&_Token.TransactOpts, _referral, _amount)
}

// RemoveLeader is a paid mutator transaction binding the contract method 0x9037f182.
//
// Solidity: function removeLeader(address _leader) returns()
func (_Token *TokenTransactor) RemoveLeader(opts *bind.TransactOpts, _leader common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "removeLeader", _leader)
}

// RemoveLeader is a paid mutator transaction binding the contract method 0x9037f182.
//
// Solidity: function removeLeader(address _leader) returns()
func (_Token *TokenSession) RemoveLeader(_leader common.Address) (*types.Transaction, error) {
	return _Token.Contract.RemoveLeader(&_Token.TransactOpts, _leader)
}

// RemoveLeader is a paid mutator transaction binding the contract method 0x9037f182.
//
// Solidity: function removeLeader(address _leader) returns()
func (_Token *TokenTransactorSession) RemoveLeader(_leader common.Address) (*types.Transaction, error) {
	return _Token.Contract.RemoveLeader(&_Token.TransactOpts, _leader)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Token *TokenTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Token *TokenSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.RenounceRole(&_Token.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Token *TokenTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.RenounceRole(&_Token.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Token *TokenTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Token *TokenSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeRole(&_Token.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Token *TokenTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeRole(&_Token.TransactOpts, role, account)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Token *TokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Token *TokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Token *TokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, from, to, amount)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(uint256 index) returns()
func (_Token *TokenTransactor) Unlock(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "unlock", index)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(uint256 index) returns()
func (_Token *TokenSession) Unlock(index *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Unlock(&_Token.TransactOpts, index)
}

// Unlock is a paid mutator transaction binding the contract method 0x6198e339.
//
// Solidity: function unlock(uint256 index) returns()
func (_Token *TokenTransactorSession) Unlock(index *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Unlock(&_Token.TransactOpts, index)
}

// WithdrawImmediately is a paid mutator transaction binding the contract method 0xce9b6267.
//
// Solidity: function withdrawImmediately(address _to) returns()
func (_Token *TokenTransactor) WithdrawImmediately(opts *bind.TransactOpts, _to common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "withdrawImmediately", _to)
}

// WithdrawImmediately is a paid mutator transaction binding the contract method 0xce9b6267.
//
// Solidity: function withdrawImmediately(address _to) returns()
func (_Token *TokenSession) WithdrawImmediately(_to common.Address) (*types.Transaction, error) {
	return _Token.Contract.WithdrawImmediately(&_Token.TransactOpts, _to)
}

// WithdrawImmediately is a paid mutator transaction binding the contract method 0xce9b6267.
//
// Solidity: function withdrawImmediately(address _to) returns()
func (_Token *TokenTransactorSession) WithdrawImmediately(_to common.Address) (*types.Transaction, error) {
	return _Token.Contract.WithdrawImmediately(&_Token.TransactOpts, _to)
}

// TokenAddLeaderIterator is returned from FilterAddLeader and is used to iterate over the raw logs and unpacked data for AddLeader events raised by the Token contract.
type TokenAddLeaderIterator struct {
	Event *TokenAddLeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenAddLeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenAddLeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenAddLeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenAddLeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenAddLeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenAddLeader represents a AddLeader event raised by the Token contract.
type TokenAddLeader struct {
	Leader   common.Address
	Referral common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddLeader is a free log retrieval operation binding the contract event 0x389d1971ac1401d81e203468076b4f96e8f39fc8cf0d575992fbec02ae3373ec.
//
// Solidity: event AddLeader(address indexed leader, address indexed referral)
func (_Token *TokenFilterer) FilterAddLeader(opts *bind.FilterOpts, leader []common.Address, referral []common.Address) (*TokenAddLeaderIterator, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}
	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "AddLeader", leaderRule, referralRule)
	if err != nil {
		return nil, err
	}
	return &TokenAddLeaderIterator{contract: _Token.contract, event: "AddLeader", logs: logs, sub: sub}, nil
}

// WatchAddLeader is a free log subscription operation binding the contract event 0x389d1971ac1401d81e203468076b4f96e8f39fc8cf0d575992fbec02ae3373ec.
//
// Solidity: event AddLeader(address indexed leader, address indexed referral)
func (_Token *TokenFilterer) WatchAddLeader(opts *bind.WatchOpts, sink chan<- *TokenAddLeader, leader []common.Address, referral []common.Address) (event.Subscription, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}
	var referralRule []interface{}
	for _, referralItem := range referral {
		referralRule = append(referralRule, referralItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "AddLeader", leaderRule, referralRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenAddLeader)
				if err := _Token.contract.UnpackLog(event, "AddLeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddLeader is a log parse operation binding the contract event 0x389d1971ac1401d81e203468076b4f96e8f39fc8cf0d575992fbec02ae3373ec.
//
// Solidity: event AddLeader(address indexed leader, address indexed referral)
func (_Token *TokenFilterer) ParseAddLeader(log types.Log) (*TokenAddLeader, error) {
	event := new(TokenAddLeader)
	if err := _Token.contract.UnpackLog(event, "AddLeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*TokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenBuyPrivateSaleIterator is returned from FilterBuyPrivateSale and is used to iterate over the raw logs and unpacked data for BuyPrivateSale events raised by the Token contract.
type TokenBuyPrivateSaleIterator struct {
	Event *TokenBuyPrivateSale // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenBuyPrivateSaleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenBuyPrivateSale)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenBuyPrivateSale)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenBuyPrivateSaleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenBuyPrivateSaleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenBuyPrivateSale represents a BuyPrivateSale event raised by the Token contract.
type TokenBuyPrivateSale struct {
	Buyer    common.Address
	Amount   *big.Int
	Referral common.Address
	Index    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBuyPrivateSale is a free log retrieval operation binding the contract event 0xcbb858f9c6fd8db9fdd2c3498b6283aede9cd9d624dcc967fa0859ad4242db09.
//
// Solidity: event BuyPrivateSale(address indexed buyer, uint256 amount, address referral, uint256 index)
func (_Token *TokenFilterer) FilterBuyPrivateSale(opts *bind.FilterOpts, buyer []common.Address) (*TokenBuyPrivateSaleIterator, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "BuyPrivateSale", buyerRule)
	if err != nil {
		return nil, err
	}
	return &TokenBuyPrivateSaleIterator{contract: _Token.contract, event: "BuyPrivateSale", logs: logs, sub: sub}, nil
}

// WatchBuyPrivateSale is a free log subscription operation binding the contract event 0xcbb858f9c6fd8db9fdd2c3498b6283aede9cd9d624dcc967fa0859ad4242db09.
//
// Solidity: event BuyPrivateSale(address indexed buyer, uint256 amount, address referral, uint256 index)
func (_Token *TokenFilterer) WatchBuyPrivateSale(opts *bind.WatchOpts, sink chan<- *TokenBuyPrivateSale, buyer []common.Address) (event.Subscription, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "BuyPrivateSale", buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenBuyPrivateSale)
				if err := _Token.contract.UnpackLog(event, "BuyPrivateSale", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyPrivateSale is a log parse operation binding the contract event 0xcbb858f9c6fd8db9fdd2c3498b6283aede9cd9d624dcc967fa0859ad4242db09.
//
// Solidity: event BuyPrivateSale(address indexed buyer, uint256 amount, address referral, uint256 index)
func (_Token *TokenFilterer) ParseBuyPrivateSale(log types.Log) (*TokenBuyPrivateSale, error) {
	event := new(TokenBuyPrivateSale)
	if err := _Token.contract.UnpackLog(event, "BuyPrivateSale", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenChangeCommissionIterator is returned from FilterChangeCommission and is used to iterate over the raw logs and unpacked data for ChangeCommission events raised by the Token contract.
type TokenChangeCommissionIterator struct {
	Event *TokenChangeCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenChangeCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenChangeCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenChangeCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenChangeCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenChangeCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenChangeCommission represents a ChangeCommission event raised by the Token contract.
type TokenChangeCommission struct {
	Leader common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterChangeCommission is a free log retrieval operation binding the contract event 0xfa345d2beed33434a9d5f83f5f64d58bd4d778ddf4bdfdc038cd621eb23a2f1b.
//
// Solidity: event ChangeCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) FilterChangeCommission(opts *bind.FilterOpts, leader []common.Address) (*TokenChangeCommissionIterator, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "ChangeCommission", leaderRule)
	if err != nil {
		return nil, err
	}
	return &TokenChangeCommissionIterator{contract: _Token.contract, event: "ChangeCommission", logs: logs, sub: sub}, nil
}

// WatchChangeCommission is a free log subscription operation binding the contract event 0xfa345d2beed33434a9d5f83f5f64d58bd4d778ddf4bdfdc038cd621eb23a2f1b.
//
// Solidity: event ChangeCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) WatchChangeCommission(opts *bind.WatchOpts, sink chan<- *TokenChangeCommission, leader []common.Address) (event.Subscription, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "ChangeCommission", leaderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenChangeCommission)
				if err := _Token.contract.UnpackLog(event, "ChangeCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeCommission is a log parse operation binding the contract event 0xfa345d2beed33434a9d5f83f5f64d58bd4d778ddf4bdfdc038cd621eb23a2f1b.
//
// Solidity: event ChangeCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) ParseChangeCommission(log types.Log) (*TokenChangeCommission, error) {
	event := new(TokenChangeCommission)
	if err := _Token.contract.UnpackLog(event, "ChangeCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenRemoveLeaderIterator is returned from FilterRemoveLeader and is used to iterate over the raw logs and unpacked data for RemoveLeader events raised by the Token contract.
type TokenRemoveLeaderIterator struct {
	Event *TokenRemoveLeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenRemoveLeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenRemoveLeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenRemoveLeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenRemoveLeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenRemoveLeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenRemoveLeader represents a RemoveLeader event raised by the Token contract.
type TokenRemoveLeader struct {
	Leader common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveLeader is a free log retrieval operation binding the contract event 0x2e85674249ebd86c47d4e26f8bbbfa002362d4c01856c6ec75b481e4fdfe63e3.
//
// Solidity: event RemoveLeader(address indexed leader)
func (_Token *TokenFilterer) FilterRemoveLeader(opts *bind.FilterOpts, leader []common.Address) (*TokenRemoveLeaderIterator, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "RemoveLeader", leaderRule)
	if err != nil {
		return nil, err
	}
	return &TokenRemoveLeaderIterator{contract: _Token.contract, event: "RemoveLeader", logs: logs, sub: sub}, nil
}

// WatchRemoveLeader is a free log subscription operation binding the contract event 0x2e85674249ebd86c47d4e26f8bbbfa002362d4c01856c6ec75b481e4fdfe63e3.
//
// Solidity: event RemoveLeader(address indexed leader)
func (_Token *TokenFilterer) WatchRemoveLeader(opts *bind.WatchOpts, sink chan<- *TokenRemoveLeader, leader []common.Address) (event.Subscription, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "RemoveLeader", leaderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenRemoveLeader)
				if err := _Token.contract.UnpackLog(event, "RemoveLeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveLeader is a log parse operation binding the contract event 0x2e85674249ebd86c47d4e26f8bbbfa002362d4c01856c6ec75b481e4fdfe63e3.
//
// Solidity: event RemoveLeader(address indexed leader)
func (_Token *TokenFilterer) ParseRemoveLeader(log types.Log) (*TokenRemoveLeader, error) {
	event := new(TokenRemoveLeader)
	if err := _Token.contract.UnpackLog(event, "RemoveLeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Token contract.
type TokenRoleAdminChangedIterator struct {
	Event *TokenRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenRoleAdminChanged represents a RoleAdminChanged event raised by the Token contract.
type TokenRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Token *TokenFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TokenRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TokenRoleAdminChangedIterator{contract: _Token.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Token *TokenFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TokenRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenRoleAdminChanged)
				if err := _Token.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Token *TokenFilterer) ParseRoleAdminChanged(log types.Log) (*TokenRoleAdminChanged, error) {
	event := new(TokenRoleAdminChanged)
	if err := _Token.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Token contract.
type TokenRoleGrantedIterator struct {
	Event *TokenRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenRoleGranted represents a RoleGranted event raised by the Token contract.
type TokenRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenRoleGrantedIterator{contract: _Token.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TokenRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenRoleGranted)
				if err := _Token.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) ParseRoleGranted(log types.Log) (*TokenRoleGranted, error) {
	event := new(TokenRoleGranted)
	if err := _Token.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Token contract.
type TokenRoleRevokedIterator struct {
	Event *TokenRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenRoleRevoked represents a RoleRevoked event raised by the Token contract.
type TokenRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenRoleRevokedIterator{contract: _Token.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TokenRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenRoleRevoked)
				if err := _Token.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Token *TokenFilterer) ParseRoleRevoked(log types.Log) (*TokenRoleRevoked, error) {
	event := new(TokenRoleRevoked)
	if err := _Token.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*TokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenUnlockIterator is returned from FilterUnlock and is used to iterate over the raw logs and unpacked data for Unlock events raised by the Token contract.
type TokenUnlockIterator struct {
	Event *TokenUnlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenUnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenUnlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenUnlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenUnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenUnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenUnlock represents a Unlock event raised by the Token contract.
type TokenUnlock struct {
	PackageIndex *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUnlock is a free log retrieval operation binding the contract event 0x832a253ad4e9e88f705006a24d9957b8aa1de307a0f9d0a6ad5fd0b0ac810505.
//
// Solidity: event Unlock(uint256 packageIndex)
func (_Token *TokenFilterer) FilterUnlock(opts *bind.FilterOpts) (*TokenUnlockIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return &TokenUnlockIterator{contract: _Token.contract, event: "Unlock", logs: logs, sub: sub}, nil
}

// WatchUnlock is a free log subscription operation binding the contract event 0x832a253ad4e9e88f705006a24d9957b8aa1de307a0f9d0a6ad5fd0b0ac810505.
//
// Solidity: event Unlock(uint256 packageIndex)
func (_Token *TokenFilterer) WatchUnlock(opts *bind.WatchOpts, sink chan<- *TokenUnlock) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Unlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenUnlock)
				if err := _Token.contract.UnpackLog(event, "Unlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlock is a log parse operation binding the contract event 0x832a253ad4e9e88f705006a24d9957b8aa1de307a0f9d0a6ad5fd0b0ac810505.
//
// Solidity: event Unlock(uint256 packageIndex)
func (_Token *TokenFilterer) ParseUnlock(log types.Log) (*TokenUnlock, error) {
	event := new(TokenUnlock)
	if err := _Token.contract.UnpackLog(event, "Unlock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWithdrawCommissionIterator is returned from FilterWithdrawCommission and is used to iterate over the raw logs and unpacked data for WithdrawCommission events raised by the Token contract.
type TokenWithdrawCommissionIterator struct {
	Event *TokenWithdrawCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWithdrawCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWithdrawCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWithdrawCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWithdrawCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWithdrawCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWithdrawCommission represents a WithdrawCommission event raised by the Token contract.
type TokenWithdrawCommission struct {
	Leader common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawCommission is a free log retrieval operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) FilterWithdrawCommission(opts *bind.FilterOpts, leader []common.Address) (*TokenWithdrawCommissionIterator, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "WithdrawCommission", leaderRule)
	if err != nil {
		return nil, err
	}
	return &TokenWithdrawCommissionIterator{contract: _Token.contract, event: "WithdrawCommission", logs: logs, sub: sub}, nil
}

// WatchWithdrawCommission is a free log subscription operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) WatchWithdrawCommission(opts *bind.WatchOpts, sink chan<- *TokenWithdrawCommission, leader []common.Address) (event.Subscription, error) {

	var leaderRule []interface{}
	for _, leaderItem := range leader {
		leaderRule = append(leaderRule, leaderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "WithdrawCommission", leaderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWithdrawCommission)
				if err := _Token.contract.UnpackLog(event, "WithdrawCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawCommission is a log parse operation binding the contract event 0x2a016beab1c9536945a8f4c51b734f24f9d1458b765600efdabb6a3c52251e75.
//
// Solidity: event WithdrawCommission(address indexed leader, uint256 amount)
func (_Token *TokenFilterer) ParseWithdrawCommission(log types.Log) (*TokenWithdrawCommission, error) {
	event := new(TokenWithdrawCommission)
	if err := _Token.contract.UnpackLog(event, "WithdrawCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
